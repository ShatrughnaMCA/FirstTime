@using Kendo.Mvc.UI;
@model NoidaAuthority.PMS.Entity.CustomerDetailViewModel
@using NoidaAuthority.PMS.Common;

@{
    ViewBag.Title = "Service History";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}
<style>
    .h1-title {
	    text-transform:uppercase;
	    color:#0b2d23;
	    font-size:140%;
	    font-weight:bold
    }
    .hr-div {
	    background: #299a8b;
	    height:12px;
        margin: 5px 0 0 0;
    }
    .k-grid th.k-header .k-link, .k-grid-header .k-link {/*, .k-grouping-header*/
    color: #2e2e2e !important;
}
</style>


<div class="container-content">
    <div>
        @Html.HiddenFor(model => model.CustomerModel.RegistrationId)
    </div>
    <div class="col-md-12">
        <div class="row row-heading">
            <div class="col-md-12 divPropertyDetailHeader" style="margin-bottom:20px">
                <h4 class="inline">Service Request Detail</h4>
                <a href="/Customer/Property/ServiceRequest" class="a-btn pull-right" target="_blank">Request Serevice</a>
            </div>
        </div>        
    </div>
    
    <div class="col-md-12 k-grid-content">
        @(Html.Kendo().Grid<NoidaAuthority.PMS.Entity.ServiceViewModel>()
            .Name("gridPaymentSchedule")
            .Columns(columns =>
            {
                columns.Bound(c => c.Id).Hidden(true);
                columns.Bound(c => c.Id).Title("Ref Id").Width(110).ClientTemplate("<a href='/Customer/Property/ServiceDetail?id= #=EncryptedId#'> #=Id#</a>");
                columns.Bound(c => c.ServiceName).Title("Service Name");
                //columns.Bound(c => c.Description).Title("Description");
                //columns.Bound(c => c.Requestor).Title("Requestor");
                columns.Bound(c => c.CreatedDate).Format("{0:dd-MMM-yyyy}").Title("Request Date").Width(140);
                columns.Bound(c => c.MobileNo).Title("Mobile No").Width(120);
                //columns.Bound(c => c.Status).Title("Status").Width(120).ClientTemplate("#if(StatusId == 8){# <center>#=Status# <a onclick='javascript:WithdrawRequest(#=Id#);'>Withdraw</a></center>#}else{#<center>#=Status#</center>#}# ");
                columns.Bound(c => c.Status).Title("Status").Width(120).ClientTemplate("#if(StatusId == 8 && RequestThrough == 'Online'){# <a onclick='javascript:WithdrawRequest(#=Id#);' style='font-weight:bold;color:blue;cursor:pointer;'>Click here to Withdraw</a>#}else{# #=Status# #}# ");
                columns.Bound(c => c.IsProcessingFeePaid).Title("Payment").Width(120).ClientTemplate("#if(PaymentStatusId==0 && StatusId == 0){# <center><a href='/Customer/Payment/Index?rid=#=RegistrationId#&id=#=Id#' style='font-weight:bold;cursor:pointer;'>pay</a></center>#}else{if(PaymentStatusId==1){#<center>Paid</center> #}else{# <center>--</center> #}}#");
                columns.Bound(c => c.Status).Title("Letter").Width(120).ClientTemplate("#if(StatusId == 9 && ISUploaded == true){# <center><a onclick='javascript:ViewLetter(#=Id#);'style='font-weight:bold;cursor:pointer;'>view</a></center> #}#");
                //columns.Bound(c => c.Status).Title("View").Width(120).ClientTemplate(" <center><a onclick='javascript:ViewLetter(#=Id#);'style='font-weight:bold;cursor:pointer;'>view</a></center> ");                
                columns.Bound(c => c.Status).Title("Objection Document").Width(120).ClientTemplate("#if(DocumentStatus == 10 && StatusId == 10){# <center><a onclick='javascript:ViewObjectionLetter(#=Id#);'style='font-weight:bold;cursor:pointer;'>view</a></center> #}#");
            })
            .Sortable(sort => sort.Enabled(true)).Filterable().Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable.Enabled(true).Refresh(true).PageSizes(true))
            .ClientDetailTemplateId("template").AutoBind(true)
            .DataSource
            (
                dataSource => dataSource
                .Ajax().ServerOperation(true).Sort(x => x.Add(i => i.CreatedDate).Descending())
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("GetServiceHistoryDataListById", "Property", new { area = "Customer" }).Data("AdditionalInfo")).PageSize(10)
            )
        )
    </div>
</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<NoidaAuthority.PMS.Entity.ServiceViewModel>()
            .Name("grid_#=Id#") // template expression, to be evaluated in the master context
            .Columns(columns =>
            {
                columns.Bound(c => c.Id).Hidden(true);
                //columns.Bound(o => o.Applicant).Width(300);//.ClientTemplate("<span>#= ServiceName #<br/><small ><b>Receiving Date:</b>&nbsp;#= CreatedDate#</small></span>");
                columns.Bound(o => o.Description);
                columns.Bound(o => o.Comment);//.ClientTemplate("<label>#=Comment#</label>");
                //columns.Bound(o => o.Status).Width(120).Title("Update Status").ClientTemplate("<label class='lbl-status-action' onclick='javascript:OpenStatusWindow(this)'>#=Status#</label>");
                //columns.Bound(o => o.RequestDate).Format("{0:dd/MM/yyyy}").Width(120);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("GetServiceHistoryDataListById", "Property", new { RegistrationId = "#=RegistrationId#", Id = "#=Id#" }))
            )
            .ToClientTemplate()
    )
</script>
<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>

<script>
    function AdditionalInfo() {
        return {
            RegistrationId: $('#CustomerModel_RegistrationId').val()
            //rid: 10000013
        }
    }

    function WithdrawRequest(row) {
        $.ajax({
            dataType: 'json',
            type: 'Post',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ Id: row }),
            url: '/Customer/Property/UpdateServiceRequestStatus',
            success: function (result) {
                if (result == '@ReturnType.Success') {
                    alertify.success("Status updated successfully.");
                    window.location.reload();
                }
                else {
                    alertify.error("Status is not updated.");
                }
            },
            error: function (ajaxRequest, strError) {
            }
        });
    }

    function ViewLetter(row) {
        var rid = $('#CustomerModel_RegistrationId').val();
        var actionType = "Complete";
        $.ajax({
            dataType: 'json',
            type: 'Post',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ Id: row, Rid: rid ,ActionType: actionType }),
            url: '/Customer/Property/GetUploadedDocumentByServiceId',
            success: function (result) {
                if (result !="" || result !=null) {                    
                    window.location.href = result;
                }
                else {
                    alertify.error("File Not Found.");
                }
            },
            error: function (ajaxRequest, strError) {
            }
        });
    }

    function ViewObjectionLetter(row) {
        var rid = $('#CustomerModel_RegistrationId').val();
        var actionType = "Objection";
        $.ajax({
            dataType: 'json',
            type: 'Post',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ Id: row, Rid: rid, ActionType: actionType }),
            url: '/Customer/Property/GetUploadedDocumentByServiceId',
            success: function (result) {
                if (result != "" || result != null) {
                    window.location.href = result;
                }
                else {
                    alertify.error("File Not Found.");
                }
            },
            error: function (ajaxRequest, strError) {
            }
        });
    }

</script>