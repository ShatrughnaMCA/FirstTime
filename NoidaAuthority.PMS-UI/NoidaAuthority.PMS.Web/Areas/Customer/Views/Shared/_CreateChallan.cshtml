@model NoidaAuthority.PMS.Entity.PaymentViewModel
@using Kendo.Mvc.UI
@using Kendo.Mvc.Extensions;

<div class="row" style="padding-top:15px;">
    @Html.HiddenFor(m=>m.RegistrationId)
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Bank Name", htmlAttributes: new { @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @(Html.Kendo().DropDownListFor(model => model.BankId)
                            .Name("bankId")
                            .DataTextField("text")
                            .DataValueField("id")
                            .OptionLabel("Select")
                            .Filter("contains")
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetAllBanks", "Property", new { area="Customer"});
                                });
                            })
                //.Events(model => model.Change("CleanAccountNumber"))
                            .HtmlAttributes(new { style = "width: 100%", @class = "schemeForms" })
        )
        @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Branch Address", htmlAttributes: new { @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @(Html.Kendo().DropDownListFor(model => model.BranchId)
                            .Name("branchId")
                            .DataTextField("text")
                            .DataValueField("id")
                            .OptionLabel("Select")
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetAllBranchs", "Property", new { area="Customer"})
                                        .Data("filterBranches");
                                }).ServerFiltering(true);
                            })
                            .CascadeFrom("bankId")
                            .Events(model => model.Change("HideShowBranch"))
                            .HtmlAttributes(new { style = "width: 100%", @class = "schemeForms" })
        )
        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
    </div>
</div>

<div class="row" style="padding-top:15px;">
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Account Number", htmlAttributes: new { @id = "lblAccountddl", @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group" id="lblDdlAccountNumber">
        @Html.TextBoxFor(m => m.AccountNo, new { @readonly = "readonly", @class = "form-control" })

    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Account Head", htmlAttributes: new { @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @(Html.Kendo().DropDownListFor(model => model.AccountHeadId)
                //.Name("AccountHeadId")
                            .DataTextField("text")
                            .DataValueField("id")
                            .OptionLabel("Select")
                            .Filter("contains")
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetAllAccountHead", "Property", new { area="Customer"});
                                });
                            })

                            .HtmlAttributes(new { style = "width: 100%", @class = "schemeForms" })
        )
        @Html.ValidationMessageFor(model => model.AccountHeadId, "", new { @class = "text-danger" })
    </div>

</div>

<div class="row" style="padding-top:15px;">
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Account Subhead", htmlAttributes: new { @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @(Html.Kendo().DropDownListFor(model => model.AccountSubHeadId)
                //.Name("AccountSubHeadId")
                            .DataTextField("text")
                            .DataValueField("id")
                            .OptionLabel("Select")
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetAccountSubHead", "Property", new { area="Customer"})
                                        .Data("filterAccountSubHead");
                                }).ServerFiltering(true);
                            })
                                            .CascadeFrom("AccountHeadId")
                //.Events(model => model.Change("HideShowBranch").DataBound("onDataBound"))
                            .HtmlAttributes(new { style = "width: 100%", @class = "schemeForms" })
        )
        @Html.ValidationMessageFor(model => model.AccountSubHeadId, "", new { @class = "text-danger" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @Html.Label("Amount", htmlAttributes: new { @id = "lblAccountddl", @class = "required" })
    </div>
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        @(Html.Kendo().NumericTextBoxFor(m => m.Amount)
                                   .Name("Amount")
                                  .Min(0)
                                    .Max(999999999999999999)
                                            .Spinners(false).Step(0)
                                    .Enable(true)
                                 .HtmlAttributes(new { style = "width: 100%", @maxlength = "18", @class = "k-label  textBoxValueRightAlign" })
        )
        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
    </div>
</div>

<div class="row" style="padding-top:15px;">
    <div class="col-md-3 col-sm-3 col-xs-12 form-group">
        <input type="button" id="btnAdd" value="Add" class="btn btn-add" />
    </div>
</div>

<div class="k-grid-content" id="divChallanGrid">
    @*@Html.HiddenFor(c => c.RId)*@
    @(Html.Kendo().Grid<NoidaAuthority.PMS.Entity.PaymentViewModel>()
                        .Name("gridChargeDetails")
                            .Columns(columns =>
                            {
                                columns.Bound(c => c.ChallanId).Hidden(true);
                                columns.Bound(c => c.RegistrationId).Hidden(true);
                                columns.Bound(c => c.HeadName).Title("Account Head");
                                columns.Bound(c => c.SubHeadName).Title("Account Sub Head");
                                columns.Bound(c => c.Amount).Title("Amount");
                                //columns.Bound(c => c.BankName).Title("Bank");
                                //columns.Bound(c => c.CreatedDate).Title("Date").Format("{0:dd-MMM-yyyy}");
                                columns.Bound(c => c.TransactionId).Title("Action").ClientTemplate("<a onclick='javascript:RemoveChallanDetails(this);'class='hyperlinkcss'>Remove</a>").Filterable(false).Sortable(false);
                                //columns.Bound(c => c.ChallanTransID).Title("Action").ClientTemplate("<a onclick='javascript:RemoveDetails(\"#=ChallanTransID#\");'class='hyperlinkcss'>Remove</a>").Filterable(false).Sortable(false);
                            })
                            .Sortable()
                            .Filterable()
                            .Resizable(resize => resize.Columns(true))

                            .Pageable(pageable => pageable.Enabled(true).Refresh(true).PageSizes(true))
            //.DataSource(dataSource => dataSource
            //                .Ajax().Model(model => model.Id(c => c.ChallanTransID))
            //.ServerOperation(true)
            //.Read(read => read.Action("GetAccountChargeDetails", "PropertyRegistration").Data("AdditionalInfo")).PageSize(20)
            //)
                                    .DataSource(dataSource => dataSource
                                                    .Ajax().Model(model => model.Id(c => c.TransactionId))
                                    .ServerOperation(true)
                                            .Read(read => read.Action("GetGeneratedChallanDetails", "Property", new { area="Customer"}).Data("AdditionalInfo")).PageSize(5)
            //.Read(read => read.Action("GetGeneratedChallanDetails", "PropertyRegistration").Data("AdditionalInfo")).PageSize(5)
                                    )
    )
</div>

<div>
    <div class="row">
        @Html.HiddenFor(model => model.Amount, htmlAttributes: new { @id = "hdnAmmount" })
        @Html.HiddenFor(model => model.AccountHeadId, htmlAttributes: new { @id = "hdnAccountHeadId" })
        @Html.HiddenFor(model => model.AccountSubHeadId, htmlAttributes: new { @id = "hdnAccountSubHeadId" })
    </div>
</div>

<div class="box-button text-center">
    <input type="button" id="btnBack" value="Back" class="btn  btn-default" />
    <input type="button" value="Generate Challan" id="btnGenerateChallan" class="btn btn-default" />
</div>


<div id="divPrintChallan" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="padding-top:40px;">
    <div class="modal-dialog" style="width: 60%;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">  <b>Challan</b></h4>
            </div>
            <div class="modal-body" style="overflow:auto; height:400px;">
                <div id="divChallanBody"></div>
            </div>
            <div class="modal-footer" style="text-align: center;">
                <button type="submit" id="btnPrintDiv" class="k-button" data-dismiss="modal" onclick="PrintDiv();">Print</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function HideShowBranch() {
        var bankId = $('#bankId').val();
        var branchId = $('#branchId').val();
        if (bankId == '') {
            $("#DdlAccountNumber").val('');
            //alertify.error("Please select Bank Name");
            return false;
        }
        if (branchId == '') {
            $("#DdlAccountNumber").val('');
            //alertify.error("Please select Branch name");
            return false;
        }
        $.ajax({
            dataType: 'json',
            type: 'Post',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ BankId: bankId, BranchId: branchId }),
            url: 'Customer/Property/GetAccountNumber',
            success: function (result) {
                $("#DdlAccountNumber").val(result)
            },
            error: function (objAjaxRequest, strError) {
                var respText = objAjaxRequest.responseText;
                alertify.error("Some Error in saved database.");
            }

        });
    }

    function AdditionalInfo() {
        return {
            rid: $('#RId').val()
        }
    }

    $("#btnAdd").click(function () {

        var rId = $("#RId").val();

        var AccountHeadId = $("#AccountHeadId").val();
        var AccountSubHeadId = $("#AccountSubHeadId").val();
        var Amount = $("#Amount").val();

        $('#hdnAmmount').val(Amount);
        $('#hdnAccountHeadId').val(AccountHeadId);
        $('#hdnAccountSubHeadId').val(AccountSubHeadId);

        if (rId == "") {
            alertify.error("Please select RId.");
            return false;
        }
        if (AccountHeadId == "") {
            alertify.error("Please select Account Head.");
            return false;
        }
        if (AccountSubHeadId == "") {
            alertify.error("Please select Sub Account Head.");
            return false;
        }
        if (Amount == "") {
            alertify.error("Please enter  Amount.");
            return false;
        }

        $.ajax({
            dataType: 'json',
            type: 'Post',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify({ RegistrationId: rId, AccountHeadId: AccountHeadId, AccountSubHeadId: AccountSubHeadId, Amount: Amount }),
            url: '/PropertyRegistration/SaveCreateChallan',
            success: function (result) {
                if (result == 0) {
                    $("#AccountHeadId").data("kendoDropDownList").value("");
                    $("#AccountSubHeadId").data("kendoDropDownList").value("");
                    $("#Amount").data("kendoNumericTextBox").value("");
                    $("#gridChargeDetails").data("kendoGrid").dataSource.read();
                    //alertify.success("Data saved successfully.");
                    return false;
                }
                if (result == 2) {
                    $("#AccountHeadId").data("kendoDropDownList").value("");
                    $("#AccountSubHeadId").data("kendoDropDownList").value("");
                    $("#Amount").data("kendoNumericTextBox").value("");
                    $("#gridChargeDetails").data("kendoGrid").dataSource.read();
                    alertify.success("Registration id is changed");
                }
                    //if (result == 3) {
                    //    alertify.error("Maximum 3 charges are allowed.");
                    //    return false;
                    //}
                else {
                    return true;
                }
            },
            error: function (objAjaxRequest, strError) {
                var respText = objAjaxRequest.responseText;
                alertify.error("Some Error in adding data.");
            }

        });

    });

    function RemoveChallanDetails(row) {
        var tr = $(row).parent().parent();
        var challanid = $(tr).children("td:eq(0)").text();
        var rid = $(tr).children("td:eq(1)").text();
        var headname = $(tr).children("td:eq(2)").text();
        var subheadname = $(tr).children("td:eq(3)").text();
        var amount = $(tr).children("td:eq(4)").text();
        var removeNotification = confirm('Are you sure to remove this details?');
        if (removeNotification) {
            $.ajax({
                type: 'POST',
                data: { RegistrationId: rid, headName: headname, subHeadName: subheadname, amount: amount },
                url: '@(Url.Action("RemoveChallanChargeDetail", "PropertyRegistration"))',
                success: function (result) {
                    if (result == true) {
                        $('#gridChargeDetails').data('kendoGrid').dataSource.read();
                        $('#gridChargeDetails').data('kendoGrid').refresh();
                        alertify.success("Charges removed successfully.");
                    }
                    else {
                        alert("Charge Details not removed");
                        return false;
                    }
                }
            });
        }
        else {
            return false;
        }
    }

    $("#btnGenerateChallan").click(function () {

        DepttId = $("#DepttId").val();

        var rId = $("#RegistationId").val();
        var bankId = $("#bankId").val();
        var branchId = $("#branchId").val();
        var DdlAccountNumber = $("#DdlAccountNumber").val();

        if (rId == "") {
            alertify.error("Please select RId.");
            return false;
        }
        if (bankId == "") {
            alertify.error("Please select Bank.");
            return false;
        }
        if (branchId == "") {
            alertify.error("Please select branch.");
            return false;
        }
        if (DdlAccountNumber == "") {
            alertify.error("Please select Account Number.");
            return false;
        }
        var grid = $("#gridChargeDetails").data("kendoGrid");
        var totalRecords = grid.dataSource.total();
        if (totalRecords == 0) {
            alertify.error("Please enter atleast one record in Charge Details section.");
            return false;
        }
        else {
            var rid1 = $("tbody").children("tr:eq(0)").children("td:eq(1)").text();
            //var rid2 = $("tbody").children("tr:eq(1)").children("td:eq(1)").text();
            //var rid3 = $("tbody").children("tr:eq(2)").children("td:eq(1)").text();
            //alert(rid1+" "+rid2+" "+rid3);
            //if (rid1 != "") {
            //    if (rid1 != rId) {
            //        alertify.error("Registration id should be same.");
            //        return false;
            //    }
            //}
            $.ajax({
                dataType: 'json',
                type: 'Post',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({ RegistrationId: rId, BankId: bankId, BranchId: branchId, ddlAccountNumber: DdlAccountNumber, deptId: DepttId }),
                //url: '/DocParser/GenerateChallan',
                url: '/DocParser/GeneratePaymentChallan',
                success: function (result) {
                    //alertify.success("Data saved successfully.");
                    $('#gridChargeDetails').data('kendoGrid').dataSource.read();
                    $('#gridChargeDetails').data('kendoGrid').refresh();
                    $("#divChallanBody").html(result);
                    $("#divPrintChallan").modal('show');

                    //window.location.href = '@Url.Action("ManageBankAccount", "PropertyRegistration")';
                },
                error: function (objAjaxRequest, strError) {
                    var respText = objAjaxRequest.responseText;
                    alertify.error("Some Error in save database.");
                }
            });
        }

    });

    $('#divPrintChallan').on('hidden.bs.modal', function () {
        ClearFieldValue();
        $("#AccountHeadId").data("kendoDropDownList").value("");
        $("#AccountSubHeadId").data("kendoDropDownList").value("");
        $("#Amount").data("kendoNumericTextBox").value("");
        $("#bankId").data("kendoDropDownList").value("");
        $("#gridChargeDetails").data('kendoGrid').dataSource.data([]);
    });

    function filterBranches() {
        return {
            bankId: $("#bankId").val()
        };
    }
    function filterAccountSubHead() {
        return {
            AccountHeadId: $("#AccountHeadId").val()
        };
    }
    function filterBankAccounts() {
        return {
            bankId: $("#bankId").val(),
            branchId: $("#branchId").val()
        };
    }

    function ToJavaScriptDate(value) {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        if (results != null) {
            var dt = new Date(parseFloat(results[1]));
            return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
        }
    }

    function PrintDiv() {
        var contents = document.getElementById("divChallanBody").innerHTML;
        var frame1 = document.createElement('iframe');
        frame1.name = "frame1";
        frame1.style.position = "absolute";
        frame1.style.top = "-1000000px";
        document.body.appendChild(frame1);
        var frameDoc = frame1.contentWindow ? frame1.contentWindow : frame1.contentDocument.document ? frame1.contentDocument.document : frame1.contentDocument;
        frameDoc.document.open();
        frameDoc.document.write('<html><head><title></title>');
        frameDoc.document.write('</head><body>');
        frameDoc.document.write(contents);
        frameDoc.document.write('</body></html>');
        frameDoc.document.close();
        setTimeout(function () {
            window.frames["frame1"].focus();
            window.frames["frame1"].print();
            document.body.removeChild(frame1);
        }, 500);
        return false;
    }

   
</script>

